version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: media_gen_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: media_gen_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: media_gen_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: media_gen_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/media-generation || true;
      /usr/bin/mc anonymous set public myminio/media-generation;
      exit 0;
      "

  # Database migrations
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_gen_migrations
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/media_gen_db
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    volumes:
      - ./alembic:/app/alembic

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_gen_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_gen_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_BUCKET_NAME=media-generation
      - S3_USE_SSL=false
      - STORAGE_TYPE=s3
      - APP_ENV=development
      - DEBUG=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./app:/app/app
      - ./media:/app/media
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: media_gen_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_gen_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_BUCKET_NAME=media-generation
      - S3_USE_SSL=false
      - STORAGE_TYPE=s3
      - APP_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./media:/app/media

  # Celery Beat (for periodic tasks)
  beat:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: media_gen_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_gen_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - APP_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "app.workers.celery_app", "beat", "--loglevel=info"]
    volumes:
      - ./app:/app/app

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: media_gen_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    command: ["celery", "-A", "app.workers.celery_app", "flower", "--port=5555"]

volumes:
  postgres_data:
  redis_data:
  minio_data: 